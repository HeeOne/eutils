{"version":3,"file":"index.js","sources":["../../../src/math/al.ts","../../../src/_validate/is.ts","../../../src/math/format.ts","../../../src/date/index.ts","../../../src/cache/StorageClient.ts","../../../src/cache/index.ts"],"sourcesContent":["/** Largest Reminder Method 计算百分数\n * @group Math\n * @category Algorithm\n * @param {number[]} arr - 原始数据\n * @param {number} [precision = 2] - 精确度\n * @return {number[]} arr - 对应百分比\n *\n * @example\n * // 示例 1: 不指定小数位数\n * formatNumberToPrecise([200, 240, 600, 555]); // 输出: [12.54, 15.05, 37.62, 34.79]\n *\n */\nexport function getPercentWithPrecision(\n  arr: number[],\n  precision: number = 2,\n): number[] | undefined {\n  if (!Array.isArray(arr)) {\n    return\n  }\n  var resultArr = []\n  var digits = Math.pow(10, precision)\n  var totalSeats = digits * 100\n  var sum = 0\n  for (var i = 0; i < arr.length; i++) {\n    sum += isNaN(arr[i]) ? 0 : arr[i]\n  }\n  var votesPerQuota = []\n  for (var i = 0; i < arr.length; i++) {\n    votesPerQuota.push((arr[i] / sum) * digits * 100)\n  }\n  var seats = []\n  var reminder = []\n  var currentSeats = 0\n  for (var i = 0; i < votesPerQuota.length; i++) {\n    var intPart = Math.floor(votesPerQuota[i])\n    seats.push(intPart)\n    reminder.push(votesPerQuota[i] - intPart)\n    currentSeats += intPart\n  }\n  while (currentSeats < totalSeats) {\n    var max = Number.MIN_SAFE_INTEGER\n    var maxIndex = null\n    for (var i = 0; i < reminder.length; i++) {\n      if (reminder[i] > max) {\n        max = reminder[i]\n        maxIndex = i\n      }\n    }\n    reminder[maxIndex as number] = 0\n    ++currentSeats\n    ++seats[maxIndex as number]\n  }\n  for (var i = 0; i < seats.length; i++) {\n    resultArr.push(seats[i] / digits)\n  }\n  return resultArr\n}\n","export type NumberLike = number | string\n\nconst toString = Object.prototype.toString\n\nfunction toRawType(value: any): string {\n  return toString.call(value).slice(8, -1)\n}\n\nexport function isArray(value: any): boolean {\n  return toRawType(value) === 'Array'\n}\n\nexport function isTrueObject(value: any): boolean {\n  return toRawType(value) === 'Object'\n}\n\nexport function isNumber(value: any): boolean {\n  return toRawType(value) === 'Number'\n}\nexport function isNumberLike(value: any): boolean {\n  return (isNumber(value) && !isNaN(value)) || isString(value)\n}\n\nexport function isString(value: any): boolean {\n  return toRawType(value) === 'String'\n}\n\nexport function isUndef(value: any): boolean {\n  return toRawType(value) == 'Undefined'\n}\n\nexport function isDef(value: any): boolean {\n  return !isUndef(value)\n}\n\nexport function isNull(value: any): boolean {\n  return toRawType(value) == 'Null'\n}\n\nexport function isNullOrUndef(value: any): boolean {\n  return isNull(value) || isUndef(value)\n}\n","import { isDef, type NumberLike } from '../_validate/is'\n\n/** 数值转换成千分位\n * @group Math\n * @category Format\n * @param {NumberLike} value\n * @param {NumberLike | undefined} [toPrecise = undefined]\n * @return {NumberLike}\n *\n * @example\n * // 示例 1: 不指定小数位数\n * formatNumberThousands(12345678.9); // 输出: 12,345,678.9\n *\n * @example\n * // 示例 2: 指定小数位数\n * formatNumberThousands(12345678.35, 0); // 输出: 12,345,678\n *\n */\nexport function formatNumberThousands(\n  value: NumberLike,\n  toPrecise: NumberLike | undefined = undefined,\n): any {\n  let toNum = value\n  if (isDef(toPrecise)) {\n    toNum = formatNumberToPrecise(value, toPrecise)\n    if (isNaN(toNum)) {\n      return NaN\n    }\n  }\n  let temp = toNum.toString().split('.')\n  temp[0] = temp[0].replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,')\n  return temp.join('.')\n}\n\n/** 数值精确小数后toPrecise位\n * @group Math\n * @category Format\n * @param {NumberLike} value\n * @param {NumberLike} [toPrecise = 2]\n * @returns {number} 包含NaN\n *\n * @example\n * // 示例 1: 不指定小数位数\n * formatNumberToPrecise(123.874); // 输出: 123.87\n *\n * @example\n * // 示例 2: 指定小数位数\n * formatNumberToPrecise(123.876, 0); // 输出: 124\n */\nexport function formatNumberToPrecise(value: NumberLike, toPrecise: NumberLike = 2): number {\n  let toNum = Number(value)\n  if (isNaN(toNum)) {\n    return NaN\n  }\n  toPrecise = parseInt(String(toPrecise))\n  if (toPrecise === 0 || toPrecise) {\n    toNum = +toNum.toFixed(toPrecise)\n  }\n  return toNum\n}\n","/**\n * @module Date\n */\n/**\n * @groupDescription Date\n * Date are for proceing Date\n * @showGroups\n */\n\n/**\n * 表示可以代表时间的类型。\n *\n * 此类型别名定义了几种可以用来表示时间的值的类型。\n * 它可以是一个原生的 JavaScript `Date` 对象，该对象能精确表示某个特定的时间点。\n * 也可以是一个字符串，通常是符合特定日期时间格式的字符串，比如 ISO 8601 格式（'2024-01-01T12:00:00Z'）。\n * 还可以是一个数字，这个数字一般是 Unix 时间戳（从 1970 年 1 月 1 日 00:00:00 UTC 开始到指定时间点所经过的毫秒数）。\n * @type TimeLike\n * @property {Date} - 原生的 JavaScript `Date` 对象，用于表示特定的时间点。\n * @property {string} - Unix 时间戳。\n * @property {number} - Unix 时间戳，代表从 1970 年 1 月 1 日 00:00:00 UTC 开始经过的毫秒数。\n */\nexport type TimeLike = Date | string | number\n\n/**\n * 定义一个用于格式化时间或日期相关信息的对象结构接口。\n * 该接口描述了一个包含多个时间单位属性的对象，可用于传递和处理时间相关的格式化信息。\n * @interface FormatAccept\n * @property {number} y - 表示年份的数值。\n * @property {number} m - 表示月份的数值，范围通常是 1 - 12。\n * @property {number} d - 表示日期（天）的数值，范围通常是 1 - 31。\n * @property {number} h - 表示小时的数值，范围通常是 0 - 23。\n * @property {number} i - 表示分钟的数值，范围通常是 0 - 59。\n * @property {number} s - 表示秒的数值，范围通常是 0 - 59。\n * @property {number} a - 表示天数的数值。\n * @property {any} [key: string] - 允许接口包含其他任意属性，键为字符串类型，值为任意类型。\n */\nexport interface FormatAccept {\n  y: number //年\n  m: number //月\n  d: number //日\n  h: number //时\n  i: number //分\n  s: number //秒\n  a: number //天\n  [key: string]: any\n}\n\n/**\n * Parse the time to string\n * @group Date\n * @category Format\n * @param {TimeLike} time - 时间\n * @param {string} [format='{y}-{m}-{d} {h}:{i}:{s}']\n * @returns {string | null}\n *\n * @example\n * // 示例 1: 不指定格式\n * parseTime(1741785818632); // 输出: 2025-03-12 21:23:38\n *\n * @example\n * // 示例 2: 指定格式\n * parseTime('1741785818632', '{y}-{m}-{d}') // 输出: 2025-03-12\n */\nexport function parseTime(\n  time: TimeLike,\n  format: string = '{y}-{m}-{d} {h}:{i}:{s}',\n): string | null {\n  if (arguments.length === 0 || !time) {\n    return null\n  }\n  let date\n  if (typeof time === 'object') {\n    date = time\n  } else {\n    if (typeof time === 'string') {\n      if (/^[0-9]+$/.test(time)) {\n        // support \"1548221490638\"\n        time = parseInt(time)\n      } else {\n        // support safari\n        // https://stackoverflow.com/questions/4310953/invalid-date-in-safari\n        time = time.replace(new RegExp(/-/gm), '/')\n      }\n    }\n\n    if (typeof time === 'number' && time.toString().length === 10) {\n      time = time * 1000\n    }\n    date = new Date(time)\n  }\n  const formatObj: FormatAccept = {\n    y: date.getFullYear(),\n    m: date.getMonth() + 1,\n    d: date.getDate(),\n    h: date.getHours(),\n    i: date.getMinutes(),\n    s: date.getSeconds(),\n    a: date.getDay(),\n  }\n  const time_str = format.replace(/{([ymdhisa])+}/g, (result, key) => {\n    const value = formatObj[key]\n    // Note: getDay() returns 0 on Sunday\n    if (key === 'a') {\n      return ['日', '一', '二', '三', '四', '五', '六'][value]\n    }\n    return value.toString().padStart(2, '0')\n  })\n  return time_str\n}\n\n/**\n * 列出范围之间月份, 返回YYYY-MM格式\n * @group Date\n * @param {TimeLike} from\n * @param {TimeLike} to\n * @returns {string[]}\n *\n * @example\n * // 示例 1\n * listMonths(new Date('2025-01'), new Date('2025-03'));\n * // 输出: ['2025-01', '2025-02','2025-03']\n *\n * @example\n * // 示例 2: 跨年\n * listMonths(new Date('2024-12'), new Date('2025-03'));\n * // 输出: ['2024-12','2025-01', '2025-02','2025-03']\n */\nexport function listMonths(from: TimeLike, to: TimeLike): string[] {\n  const dateFrom = parseTime(from, '{y}-{m}')\n  const dateTo = parseTime(to, '{y}-{m}')\n  if (!dateFrom || !dateTo) {\n    return []\n  }\n  // 解析字符串为日期对象（月份的第一天）\n  const parseDate = (str: string) => {\n    const [year, month] = str.split('-').map(Number)\n    return new Date(year, month - 1, 1) // 月份从0开始\n  }\n\n  let startDate = parseDate(dateFrom)\n  let endDate = parseDate(dateTo)\n\n  // 确保起始日期不晚于结束日期\n  if (startDate > endDate) {\n    ;[startDate, endDate] = [endDate, startDate]\n  }\n\n  const months = []\n  const currentDate = new Date(startDate)\n\n  while (currentDate <= endDate) {\n    // 格式化为YYYY-MM\n    const year = currentDate.getFullYear()\n    const month = (currentDate.getMonth() + 1).toString().padStart(2, '0')\n    months.push(`${year}-${month}`)\n\n    // 增加一个月\n    currentDate.setMonth(currentDate.getMonth() + 1)\n  }\n\n  return months\n}\n\n/**\n * 获取某天的ndays前的日期的字符串\n * @group Date\n * @param {TimeLike} timestring\n * @param {number} [ndays = 90]\n * @returns {Date}\n *\n * @example\n * // 示例 1：获取此时间戳前90天时间戳\n * generateDatefrom(1742194738400, 90).getTime()\n * // 1744786738400\n *\n * @example\n * // 示例 2: 获取此时间戳30天后时间戳\n * generateDatefrom(1742194738400, -30).getTime()\n * // 输出: 1734418738400\n */\nexport function generateDatefrom(timestring: TimeLike, ndays: number = 90): Date {\n  const temp = timestring ? new Date(timestring).getTime() : new Date().getTime()\n  //  1000 * 60 * 60 * 24 = 86400000\n  return new Date(temp - 86400000 * ndays)\n}\n","/**\n * 一个封装了本地存储（localStorage 和 sessionStorage）的客户端类，支持键名前缀、数据过期时间和序列化/反序列化功能。\n * @example\n * const client = new StorageClient({ prefix: 'app', storageType: 'local' });\n * client.setItem('token', 'abc123', 3600 * 1000); // 1小时后过期\n */\ninterface StorageClientOptions {\n  /**\n   * 存储键名的统一前缀，用于区分不同模块或应用的数据\n   * @default ''\n   */\n  prefix?: string\n  /**\n   * 选择使用的存储类型，可选本地存储（local）或会话存储（session）\n   * @default 'local'\n   */\n  storageType?: 'local' | 'session'\n}\n\nclass StorageClient {\n  /**\n   * 存储键名前缀，自动添加到所有键名前\n   */\n  private prefix: string\n  /**\n   * 实际使用的存储对象（localStorage 或 sessionStorage）\n   */\n  private storage: Storage\n\n  /**\n   * 创建一个存储客户端实例\n   * @param options 配置选项\n   */\n  constructor({ prefix = '', storageType = 'local' }: StorageClientOptions) {\n    this.prefix = prefix\n    this.storage = storageType == 'local' ? localStorage : sessionStorage\n  }\n\n  /**\n   * 生成带前缀的实际存储键名\n   * @param key 原始键名\n   * @returns 组合前缀后的完整键名\n   * @example\n   * getKey('token') // returns 'app-token' (当prefix为'app'时)\n   */\n  private getKey(key: string): string {\n    return `${this.prefix}-${key}`\n  }\n\n  /**\n   * 存储数据到指定键名\n   * @template T 存储值的类型\n   * @param key 存储键名（不需要包含前缀）\n   * @param value 要存储的值（自动序列化）\n   * @param ttl 数据的存活时间（单位：毫秒），可选\n   * @example\n   * client.setItem('user', { name: 'John' }, 60000) // 数据1分钟后过期\n   */\n  setItem<T>(key: string, value: T, ttl?: number): void {\n    const fullKey = this.getKey(key)\n    const expired = ttl ? Date.now() + ttl : undefined\n    const item = { value, expired }\n    this.storage.setItem(fullKey, JSON.stringify(item))\n  }\n\n  /**\n   * 从指定键名获取存储的数据\n   * @param key 存储键名（不需要包含前缀）\n   * @param defaultVal 当数据不存在/过期/解析失败时返回的默认值\n   * @returns 存储的值或默认值\n   * @example\n   * const user = client.getItem('user', { name: 'guest' })\n   */\n  getItem(key: string, defaultVal?: any): any {\n    const fullKey = this.getKey(key)\n    const valStr = this.storage.getItem(fullKey)\n    if (!valStr) {\n      return defaultVal\n    }\n\n    try {\n      const item = JSON.parse(valStr)\n      if (item.expired && Date.now() > item.expired) {\n        this.storage.removeItem(fullKey)\n        return defaultVal\n      }\n      return item.value\n    } catch (e) {\n      console.error(e)\n      this.storage.removeItem(fullKey)\n      return defaultVal\n    }\n  }\n\n  /**\n   * 移除指定键名的存储数据\n   * @param key 要移除的存储键名（不需要包含前缀）\n   */\n  removeItem(key: string): void {\n    const fullKey = this.getKey(key)\n    this.storage.removeItem(fullKey)\n  }\n\n  /**\n   * 清除所有带有当前前缀的存储数据\n   * @example\n   * client.clear() // 删除所有以'prefix-'开头的存储项\n   */\n  clear() {\n    const keysToRemove = []\n    for (let i = 0; i < this.storage.length; i++) {\n      const key = this.storage.key(i)\n      if (key && key.startsWith(this.prefix)) {\n        keysToRemove.push(key)\n      }\n    }\n    keysToRemove.forEach((key) => this.storage.removeItem(key))\n  }\n}\n\nexport default StorageClient\n","import StorageClient from './StorageClient'\r\n/**\r\n * createLocalStorage\r\n * @param {string} prefix - 命名空间\r\n * @returns {StorageClient}\r\n */\r\nfunction createLocalStorage(prefix: string): StorageClient {\r\n  return new StorageClient({ prefix, storageType: 'local' })\r\n}\r\n/**\r\n * createSessionStorage\r\n * @param {string} prefix - 命名空间\r\n * @returns {StorageClient}\r\n */\r\nfunction createSessionStorage(prefix: string): StorageClient {\r\n  return new StorageClient({ prefix, storageType: 'session' })\r\n}\r\n\r\nexport { StorageClient, createLocalStorage, createSessionStorage }\r\n"],"names":["getPercentWithPrecision","arr","precision","Array","isArray","resultArr","digits","Math","pow","totalSeats","sum","i","length","isNaN","votesPerQuota","push","seats","reminder","currentSeats","intPart","floor","max","Number","MIN_SAFE_INTEGER","maxIndex","toString","Object","prototype","isUndef","value","call","slice","toRawType","formatNumberThousands","toPrecise","undefined","toNum","isDef","formatNumberToPrecise","NaN","temp","split","replace","join","parseInt","String","toFixed","parseTime","time","format","arguments","date","test","RegExp","Date","formatObj","y","getFullYear","m","getMonth","d","getDate","h","getHours","getMinutes","s","getSeconds","a","getDay","result","key","padStart","listMonths","from","to","dateFrom","dateTo","parseDate","str","year","month","map","startDate","endDate","months","currentDate","setMonth","generateDatefrom","timestring","ndays","getTime","StorageClient","constructor","prefix","storageType","this","storage","localStorage","sessionStorage","getKey","setItem","ttl","fullKey","item","expired","now","JSON","stringify","getItem","defaultVal","valStr","parse","removeItem","e","console","error","clear","keysToRemove","startsWith","forEach","createLocalStorage","createSessionStorage"],"mappings":"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"}